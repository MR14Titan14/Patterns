@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class Companion {
  + validateMail(String?): Boolean
  + validateNames(String): Boolean
  + validateGit(String?): Boolean
  + validatePhone(String?): Boolean
  + validateTelegram(String?): Boolean
   ids: Int
}
class Companion {
  + writeToTxt(String, List<Student>): Unit
  + readFromTxt(String): List<Student>
}
class CreateController {
  + CreateController(View, StudentList): 
  + addStudent(String, String, String, String, String, String, String): Unit
   view: View
}
class DataList<T> {
  + DataList(List<T>): 
  + select(Int): Unit
   dataOfRows: List<List<Object>>
   table: DataTable
   names: String[]
   data: List<T>
   selected: List<Int>
}
class DataListStudentShort {
  + DataListStudentShort(List<StudentShort>, View): 
  + notifyView(): Unit
   view: View
   dataOfRows: List<List<Object>>
   names: String[]
}
class DataTable {
  + DataTable(List<List<Object>>): 
  + getElement(Int, Int): Object?
   rows: Int
   columns: Int
}
class DeleteController {
  + DeleteController(View, StudentList): 
  + deleteStudent(Int): Unit
   view: View
}
class Main {
  + Main(): 
  + main(): Unit
}
class MainKt {
  + main(): Unit
}
class ReadController {
  + ReadController(View, StudentList): 
  + refresh_data(): Unit
   view: View
   currentFilter: List<Boolean>
   currentPage: Int
}
class Student {
  + Student(String, String?, String, String, String, String?, String?, String?): 
  + Student(String, String, String): 
  + Student(String, String, String, String?, String?, String?, String?): 
  + Student(Int, String, String, String, String?, String?, String?, String?): 
  + Student(HashMap<String, Object>): 
  + Student(String): 
  + Student(String, Int): 
  + info(): String
  + contact(): String
  - hasContact(): Boolean
  + toString(): String
  + setContacts(String?, String?, String?): Unit
  - hasGit(): Boolean
  + toStringRaw(): String
  + validate(): Boolean
  + shortName(): String
   name: String
   fathername: String
   mail: String?
   phone: String?
   lastname: String
   telegram: String?
}
interface StudentListStrategy << interface >> {
  + writeToFile(String): Unit
  + readFromFile(String): Unit
   data: List<Student>
}
class StudentManager {
  + StudentManager(StudentListStrategy, View): 
  + readFromFile(String): Unit
  + writeToFile(String): Unit
   strategy: StudentListStrategy
}
class StudentShort {
  + StudentShort(Student): 
  + StudentShort(String): 
  + toString(): String
  + toStringRaw(): String
   contact: String?
   fio: String?
}
class StudentSuper {
  + StudentSuper(): 
   git: String?
   id: Int
}
class UpdateController {
  + UpdateController(View, StudentList): 
  + getStudent(Int): List<String>
  + updateStudent(Int, String, String, String, String, String, String, String): Unit
   view: View
}
class View {
  + View(): 
  + updatePageLabel(String): Unit
  + start(Stage): Unit
  + updateTables(List<StudentShort>): Unit
  - openModalWindow(Int): Unit
  + refreshFilters(): Unit
   source: StudentList
   path: String
   filters: List<String>
}
class ViewKt {
  + main(): Unit
}

Companion             +-[#820000,plain]-  Student              
Companion             +-[#820000,plain]-  StudentSuper         
DataListStudentShort  -[#000082,plain]-^  DataList             
Student               -[#000082,plain]-^  StudentSuper         
StudentShort          -[#000082,plain]-^  StudentSuper         
@enduml
